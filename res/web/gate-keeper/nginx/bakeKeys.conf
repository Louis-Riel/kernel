  include    mime.types;
  init_worker_by_lua_file setup.lua;

  lua_shared_dict dskeys 10m;


  server {
    resolver 127.0.0.11;
    listen  1234;
    root /dev/null;
    client_max_body_size 20M;
    error_page 405 =200 $uri;
    set $cors 'T';

    if ($request_method = 'OPTIONS') {
        set $cors "${cors}O";
    }

    add_header Allow "GET, POST, DELETE" always;

    location /keys {
      default_type application/json;
      content_by_lua_file bake-key.lua;
    }
  }

  server {
    ssl_certificate /etc/ssl/certs/server/selfsigned/server.crt;
    ssl_certificate_key /etc/ssl/private/ca.key;
    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    ssl_dhparam /etc/nginx/dhparam.pem;
    ssl_ecdh_curve secp384r1;

    resolver 127.0.0.11;
    listen 1443 ssl;
    listen [::]:1443 ssl;
    root /dev/null;
    client_max_body_size 20M;
    error_page 405 =200 $uri;
    set $cors 'T';

    if ($request_method = 'OPTIONS') {
        set $cors "${cors}O";
    }

    add_header Allow "GET, POST, DELETE" always;

    location /keys {
      default_type application/json;
      if ($request_method = POST ) {
        content_by_lua_file bake-key.lua;
      }
      if ($request_method = DELETE ) {
        content_by_lua_file bake-key.lua;
      }
    }
  }

