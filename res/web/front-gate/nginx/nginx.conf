  include    mime.types;

  init_worker_by_lua '
      math.randomseed(os.time());
  ';

  upstream esp {
      server 192.168.1.108;
  }

  server {
    listen        1234;
    root /usr/share/nginx/html;
    client_max_body_size 20M;
    error_page 405 =200 $uri;
    rewrite_by_lua_file signit.lua;
    set $cors 'T';
    # Extend the list of XSS-whilelisted domains by adding more
    # if ($http_origin ~ '^http[s]*?://(192.168.*|localhost).*') {
    #     set $cors T;
    # }

    if ($request_method = 'OPTIONS') {
        set $cors "${cors}O";
    }

    add_header Allow "GET, POST, HEAD, PUT, DELETE" always;

    location ~ ^.*[.]svg$ {
      default_type image/svg+xml;

      location ~ ^/(config|status|files|stat|lfs|eventDescriptor|ota|sdcard|templates)/.*$ {
        proxy_pass http://esp;
        client_max_body_size 20M;
        allow all;
      }
    }

    location ~ ^.*[.]map$ {
      default_type application/json;

      location ~ ^/(config|status|files|stat|lfs|eventDescriptor|ota|sdcard|templates)/.*$ {
        proxy_pass http://esp;
        client_max_body_size 20M;
        allow all;
      }
    }

    location ~ ^.*[.]css$ {
      default_type text/css;

      location ~ ^/(config|status|files|stat|lfs|eventDescriptor|ota|sdcard|templates)/.*$ {
        proxy_pass http://esp;
        client_max_body_size 20M;
        allow all;
      }
    }

    location ~ ^.*[.]js$ {
      default_type application/javascript;

      location ~ ^/(config|status|files|stat|lfs|eventDescriptor|ota|sdcard|templates)/.*$ {
        proxy_pass http://esp;
        client_max_body_size 20M;
        allow all;
      }
    }

    location ~ ^/ws$ {
      proxy_http_version 1.1;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $http_host;
      proxy_set_header X-NginX-Proxy true;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Host $server_name;
      proxy_pass http://esp;
      allow all;
    }

    location ~ ^/(config|status|files|stat|lfs|eventDescriptor|ota|sdcard|templates).*$ {
      if ($cors = 'T') {
          add_header 'Access-Control-Allow-Origin' "$http_origin" always;
          add_header 'Access-Control-Allow-Credentials' 'true' always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
          add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
          add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

          #add_header 'Access-Control-Expose-Headers' 'Authorization' always;
      }

      if ($cors = 'O') {
          add_header 'Access-Control-Max-Age' 1728000;
          add_header 'Content-Type' 'text/plain charset=UTF-8';
          add_header 'Content-Length' 0;
          return 204;
      }

      if ($cors = 'TO') {
          add_header 'Access-Control-Allow-Origin' "$http_origin" always;
          add_header 'Access-Control-Allow-Credentials' 'true' always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
          add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
          add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

          add_header 'Access-Control-Max-Age' 1728000;
          add_header 'Content-Type' 'text/plain charset=UTF-8';
          add_header 'Content-Length' 0;
          return 204;
      }

      proxy_pass http://esp;
      client_max_body_size 20M;
      allow all;
    }
  }

